using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    //참조로 접근
    private Rigidbody playerRigidbody; //이동에 사용 할 리지드바디 컴포넌트
    //플레이어 리지드바디 변수를 통해 리지드바디 타입의 오브젝트를 가리키는 것
    public float speed = 8f; //이동 속력

    void Start()
    {
        playerRigidbody = GetComponent<Rigidbody>();
    }

    
    void Update()
    {

        //if (Input.GetKey(KeyCode.UpArrow) == true)
        //{
        //    //위쪽 방향키 입력이 감지된 경우 z 방향 힘 주기
        //    playerRigidbody.AddForce(0f, 0f, speed);
        //}

        //if (Input.GetKey(KeyCode.DownArrow) == true)
        //{
        //    //아래쪽 방향키 입력이 감지된 경우 -z 방향 힘 주기
        //    playerRigidbody.AddForce(0f, 0f, -speed);
        //}

        //if (Input.GetKey(KeyCode.RightArrow) == true)
        //{
        //    //오른쪽 방향키 입력이 감지된 경우 x 방향 힘 주기
        //    playerRigidbody.AddForce(speed, 0f, 0f);
        //}

        //if (Input.GetKey(KeyCode.LeftArrow) == true)
        //{
        //    //왼쪽 방향키 입력이 감지된 경우 -x 방향 힘 주기
        //    playerRigidbody.AddForce(-speed, 0f, 0f);
        //}

        //위의 방법에서 업그레이드 된 코드

        // 수평축과 수직축의 입력값과 이동 속력을 사용해 결정
        float xInput = Input.GetAxis("Horizontal");
        float zInput = Input.GetAxis("Vertical");

        // 실제 이동 속도를 입력과 이동 속력을 사용해 결정
        float xSpeed = xInput * speed;
        float zSpeend = zInput * speed;

        //Vector 3 속도를 (xSpeed, 0 , zSpeed)로 생성
        Vector3 newVelocity = new Vector3(xSpeed, 0f, zSpeend); 
        //속도 표현을 Vector3로 표현,
        // 기존의 AddForce와 다른점은 관성의 유무이다.
        // 벡터형 벨로시티를 만들어 속도를 조절해주는 것은 이전 속도를
        // 지우고 새 속도를 사용하는 것이다. 따라서 관성을 무시하고 속도를 
        // 즉시 변경됩니다. 

        //리지드바디의 속도에 newVelocity 할당
        playerRigidbody.velocity = newVelocity;
    }

    public void Die()
    {
        //자신의 게임 오브젝트 비활성화
        gameObject.SetActive(false);

        //씬에 존재하는  GameManager 타입의 오브젝트를 찾아가서 가져오기
        GameManager gameManager = FindObjectOfType<GameManager>();
        //가져온 GameManager 오브젝트의 EndGame() 메서드 실행
        gameManager.EndGame();
    }
}
